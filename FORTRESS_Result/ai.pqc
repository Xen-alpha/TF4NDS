
void () movetarget_f;

void () t_movetarget;

void () knight_walk1;

void () knight_bow6;

void () knight_bow1;
float current_yaw /* = 0.000 */;
float enemy_yaw /* = 0.000 */;
float enemy_vis /* = 0.000 */;
float enemy_infront /* = 0.000 */;
float enemy_range /* = 0.000 */;
entity sight_entity;
float sight_entity_time /* = 0.000 */;
float (float v) anglemod = {

   while ( (v >= 360.000) ) {

      v = (v - 360.000);

   }
   while ( (v < 0.000) ) {

      v = (v + 360.000);

   }
   return ( v );

};

void () movetarget_f = {

   if ( !self.targetname ) {

      objerror ("monster_movetarget: no targetname");

   }
   self.solid = 1.000;
   self.touch = t_movetarget;
   setsize (self,'-8.000 -8.000 -8.000','8.000 8.000 8.000');

};

void () path_corner = {

   if ( (CheckExistence () == 0.000) ) {

      dremove (self);
      return ;

   }
   movetarget_f ();

};

void () t_movetarget = {

   local entity temp;

   if ( (other.movetarget != self) ) {

      return ;

   }
   if ( other.enemy ) {

      return ;

   }
   temp = self;
   self = other;
   other = temp;
   if ( (self.classname == "monster_ogre") ) {

      sound (self,2.000,"ogre/ogdrag.wav",1.000,2.000);

   }
   self.movetarget = find (world,targetname,other.target);
   self.goalentity = find (world,targetname,other.target);
   self.ideal_yaw = vectoyaw ((self.goalentity.origin - self.origin));
   if ( !self.movetarget ) {

      self.pausetime = (time + 999999.000);
      self.th_stand ();
      return ;

   }

};
float (entity targ) range = {

   local vector spot1;
   local vector spot2;
   local float r;

   spot1 = (self.origin + self.view_ofs);
   spot2 = (targ.origin + targ.view_ofs);
   r = vlen ((spot1 - spot2));
   if ( (r < 120.000) ) {

      return ( 0.000 );

   }
   if ( (r < 500.000) ) {

      return ( 1.000 );

   }
   if ( (r < 1000.000) ) {

      return ( 2.000 );

   }
   return ( 3.000 );

};
float (entity targ) infront = {

   local vector vec;
   local float dot;

   makevectors (self.angles);
   vec = normalize ((targ.origin - self.origin));
   dot = (vec * v_forward);
   if ( (dot > 0.300) ) {

      return ( 1.000 );

   }
   return ( 0.000 );

};

void () HuntTarget = {

   self.goalentity = self.enemy;
   self.think = self.th_run;
   self.ideal_yaw = vectoyaw ((self.enemy.origin - self.origin));
   self.nextthink = (time + 0.100);
   SUB_AttackFinished (1.000);

};

void () SightSound = {

   local float rsnd;

   if ( (self.classname == "monster_ogre") ) {

      sound (self,2.000,"ogre/ogwake.wav",1.000,1.000);

   } else {

      if ( (self.classname == "monster_knight") ) {

         sound (self,2.000,"knight/ksight.wav",1.000,1.000);

      } else {

         if ( (self.classname == "monster_shambler") ) {

            sound (self,2.000,"shambler/ssight.wav",1.000,1.000);

         } else {

            if ( (self.classname == "monster_demon1") ) {

               sound (self,2.000,"demon/sight2.wav",1.000,1.000);

            } else {

               if ( (self.classname == "monster_wizard") ) {

                  sound (self,2.000,"wizard/wsight.wav",1.000,1.000);

               } else {

                  if ( (self.classname == "monster_zombie") ) {

                     sound (self,2.000,"zombie/z_idle.wav",1.000,1.000);

                  } else {

                     if ( (self.classname == "monster_dog") ) {

                        sound (self,2.000,"dog/dsight.wav",1.000,1.000);

                     } else {

                        if ( (self.classname == "monster_hell_knight") ) {

                           sound (self,2.000,"hknight/sight1.wav",1.000,1.000);

                        } else {

                           if ( (self.classname == "monster_tarbaby") ) {

                              sound (self,2.000,"blob/sight1.wav",1.000,1.000);

                           } else {

                              if ( (self.classname == "monster_vomit") ) {

                                 sound (self,2.000,"vomitus/v_sight1.wav",1.000,1.000);

                              } else {

                                 if ( (self.classname == "monster_enforcer") ) {

                                    rsnd = rint ((random () * 3.000));
                                    if ( (rsnd == 1.000) ) {

                                       sound (self,2.000,"enforcer/sight1.wav",1.000,1.000);

                                    } else {

                                       if ( (rsnd == 2.000) ) {

                                          sound (self,2.000,"enforcer/sight2.wav",1.000,1.000);

                                       } else {

                                          if ( (rsnd == 0.000) ) {

                                             sound (self,2.000,"enforcer/sight3.wav",1.000,1.000);

                                          } else {

                                             sound (self,2.000,"enforcer/sight4.wav",1.000,1.000);

                                          }

                                       }

                                    }

                                 } else {

                                    if ( (self.classname == "monster_army") ) {

                                       sound (self,2.000,"soldier/sight1.wav",1.000,1.000);

                                    } else {

                                       if ( (self.classname == "monster_shalrath") ) {

                                          sound (self,2.000,"shalrath/sight.wav",1.000,1.000);

                                       }

                                    }

                                 }

                              }

                           }

                        }

                     }

                  }

               }

            }

         }

      }

   }

};

void () FoundTarget = {

   if ( (self.enemy.classname == "player") ) {

      sight_entity = self;
      sight_entity_time = time;

   }
   self.show_hostile = (time + 1.000);
   SightSound ();
   HuntTarget ();

};
float () FindTarget = {

   local entity client;
   local float r;

   if ( ((sight_entity_time >= (time - 0.100)) && !(self.spawnflags & 3.000)) ) {

      client = sight_entity;
      if ( (client.enemy == self.enemy) ) {

         return ;

      }

   } else {

      client = checkclient ();
      if ( !client ) {

         return ( 0.000 );

      }

   }
   if ( (client == self.enemy) ) {

      return ( 0.000 );

   }
   if ( (client.flags & 128.000) ) {

      return ( 0.000 );

   }
   if ( (client.items & 524288.000) ) {

      return ( 0.000 );

   }
   r = range (client);
   if ( (r == 3.000) ) {

      return ( 0.000 );

   }
   if ( !visible (client) ) {

      return ( 0.000 );

   }
   if ( (r == 1.000) ) {

      if ( ((client.show_hostile < time) && !infront (client)) ) {

         return ( 0.000 );

      }

   } else {

      if ( (r == 2.000) ) {

         if ( !infront (client) ) {

            return ( 0.000 );

         }

      }

   }
   self.enemy = client;
   if ( (self.enemy.classname != "player") ) {

      self.enemy = self.enemy.enemy;
      if ( (self.enemy.classname != "player") ) {

         self.enemy = world;
         return ( 0.000 );

      }

   }
   FoundTarget ();
   return ( 1.000 );

};

void (float dist) ai_forward = {

   walkmove (self.angles_y,dist);

};

void (float dist) ai_back = {

   walkmove ((self.angles_y + 180.000),dist);

};

void (float dist) ai_pain = {

   ai_back (dist);

};

void (float dist) ai_painforward = {

   walkmove (self.ideal_yaw,dist);

};

void (float dist) ai_walk = {

   local vector mtemp;

   movedist = dist;
   if ( (self.classname == "monster_dragon") ) {

      movetogoal (dist);
      return ;

   }
   if ( FindTarget () ) {

      return ;

   }
   movetogoal (dist);

};

void () ai_stand = {

   if ( FindTarget () ) {

      return ;

   }
   if ( (time > self.pausetime) ) {

      self.th_walk ();
      return ;

   }

};

void () ai_turn = {

   if ( FindTarget () ) {

      return ;

   }
   ChangeYaw ();

};

void (vector dest3) ChooseTurn = {

   local vector dir;
   local vector newdir;

   dir = (self.origin - dest3);
   newdir_x = trace_plane_normal_y;
   newdir_y = (0.000 - trace_plane_normal_x);
   newdir_z = 0.000;
   if ( ((dir * newdir) > 0.000) ) {

      dir_x = (0.000 - trace_plane_normal_y);
      dir_y = trace_plane_normal_x;

   } else {

      dir_x = trace_plane_normal_y;
      dir_y = (0.000 - trace_plane_normal_x);

   }
   dir_z = 0.000;
   self.ideal_yaw = vectoyaw (dir);

};
float () FacingIdeal = {

   local float delta;

   delta = anglemod ((self.angles_y - self.ideal_yaw));
   if ( ((delta > 45.000) && (delta < 315.000)) ) {

      return ( 0.000 );

   }
   return ( 1.000 );

};
float () WizardCheckAttack;
float () DogCheckAttack;
float () SoldierCheckAttack;
float () ShamCheckAttack;
float () DemonCheckAttack;
float () OgreCheckAttack;
float () CheckAttack;
float /* Warning: Could not determine return type */ () CheckAnyAttack = {

   if ( !enemy_vis ) {

      return ;

   }
   if ( (self.classname == "monster_army") ) {

      return ( SoldierCheckAttack () );

   }
   if ( (self.classname == "monster_ogre") ) {

      return ( OgreCheckAttack () );

   }
   if ( (self.classname == "monster_shambler") ) {

      return ( ShamCheckAttack () );

   }
   if ( (self.classname == "monster_demon1") ) {

      return ( DemonCheckAttack () );

   }
   if ( (self.classname == "monster_dog") ) {

      return ( DogCheckAttack () );

   }
   if ( (self.classname == "monster_wizard") ) {

      return ( WizardCheckAttack () );

   }
   return ( CheckAttack () );

};

void () ai_run_melee = {

   self.ideal_yaw = enemy_yaw;
   ChangeYaw ();
   if ( FacingIdeal () ) {

      self.th_melee ();
      self.attack_state = 1.000;

   }

};

void () ai_run_missile = {

   self.ideal_yaw = enemy_yaw;
   ChangeYaw ();
   if ( FacingIdeal () ) {

      self.th_missile ();
      self.attack_state = 1.000;

   }

};

void () ai_run_slide = {

   local float ofs;

   self.ideal_yaw = enemy_yaw;
   ChangeYaw ();
   if ( self.lefty ) {

      ofs = 90.000;

   } else {

      ofs = -90.000;

   }
   if ( walkmove ((self.ideal_yaw + ofs),movedist) ) {

      return ;

   }
   self.lefty = (1.000 - self.lefty);
   walkmove ((self.ideal_yaw - ofs),movedist);

};

void (float dist) ai_run = {

   local vector delta;
   local float axis;
   local float direct;
   local float ang_rint;
   local float ang_floor;
   local float ang_ceil;

   movedist = dist;
   if ( (self.enemy.health <= 0.000) ) {

      self.enemy = world;
      if ( (self.oldenemy.health > 0.000) ) {

         self.enemy = self.oldenemy;
         HuntTarget ();

      } else {

         if ( self.movetarget ) {

            self.th_walk ();

         } else {

            self.th_stand ();

         }
         return ;

      }

   }
   self.show_hostile = (time + 1.000);
   enemy_vis = visible (self.enemy);
   if ( enemy_vis ) {

      self.search_time = (time + 5.000);

   }
   if ( (coop && (self.search_time < time)) ) {

      if ( FindTarget () ) {

         return ;

      }

   }
   enemy_infront = infront (self.enemy);
   enemy_range = range (self.enemy);
   enemy_yaw = vectoyaw ((self.enemy.origin - self.origin));
   if ( (self.attack_state == 4.000) ) {

      ai_run_missile ();
      return ;

   }
   if ( (self.attack_state == 3.000) ) {

      ai_run_melee ();
      return ;

   }
   if ( CheckAnyAttack () ) {

      return ;

   }
   if ( (self.attack_state == 2.000) ) {

      ai_run_slide ();
      return ;

   }
   movetogoal (dist);

};
