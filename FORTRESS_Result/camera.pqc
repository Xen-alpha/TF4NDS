
void () CamLock = {

   local entity te;

   if ( (self.enemy == world) ) {

      te = find (world,netname,self.netname);
      while ( te ) {

         if ( (te != self) ) {

            sprint3 (self,2.000,"Locked onto ",te.netname,"\n");
            self.enemy = te;
            self.heat = vlen ((self.enemy.origin - self.origin));

         }
         te = find (te,netname,self.netname);

      }
      if ( (self.enemy == world) ) {

         sprint2 (self,2.000,te.netname," not found.\n");

      }

   } else {

      sprint (self,2.000,"Removed Lock\n");
      self.enemy = world;

   }

};

void () CamDistLock = {

   if ( (self.tfstate & 4096.000) ) {

      sprint (self,2.000,"Distance Lock OFF.\n");
      self.tfstate = (self.tfstate - (self.tfstate & 4096.000));

   } else {

      sprint (self,2.000,"Distance Lock ON.\n");
      self.tfstate = (self.tfstate | 4096.000);
      if ( self.enemy ) {

         self.camdist = vlen ((self.enemy.origin - self.origin));

      }

   }

};

void () CamVecLock = {

   if ( (self.tfstate & 2048.000) ) {

      sprint (self,2.000,"Vector Lock OFF.\n");
      self.tfstate = (self.tfstate - (self.tfstate & 2048.000));

   } else {

      if ( (self.tfstate & 32768.000) ) {

         sprint (self,2.000,"Angle Lock OFF.\n");
         self.tfstate = (self.tfstate - (self.tfstate & 32768.000));

      }
      if ( !(self.tfstate & 4096.000) ) {

         sprint (self,2.000,"Vector And Distance Lock ON.\n");
         self.tfstate = (self.tfstate | 4096.000);
         if ( self.enemy ) {

            self.camdist = vlen ((self.enemy.origin - self.origin));

         }

      } else {

         sprint (self,2.000,"Vector Lock ON.\n");

      }
      self.tfstate = (self.tfstate | 2048.000);
      if ( self.enemy ) {

         self.camangle = (self.origin - self.enemy.origin);
         self.camangle_z = (0.000 - self.camangle_z);
         self.camangle = vectoangles (self.camangle);

      }

   }

};

void () CamAngleLock = {

   local vector enemyang;

   if ( (self.tfstate & 32768.000) ) {

      sprint (self,2.000,"Angle Lock OFF.\n");
      self.tfstate = (self.tfstate - (self.tfstate & 32768.000));

   } else {

      if ( (self.tfstate & 2048.000) ) {

         sprint (self,2.000,"Vector Lock OFF.\n");
         self.tfstate = (self.tfstate - (self.tfstate & 2048.000));

      }
      if ( !(self.tfstate & 4096.000) ) {

         sprint (self,2.000,"Angle And Distance Lock ON.\n");
         self.tfstate = (self.tfstate | 4096.000);
         if ( self.enemy ) {

            self.camdist = vlen ((self.enemy.origin - self.origin));

         }

      } else {

         sprint (self,2.000,"Angle Lock ON.\n");

      }
      self.tfstate = (self.tfstate | 32768.000);
      if ( self.enemy ) {

         enemyang = self.enemy.angles;
         enemyang_z = (0.000 - enemyang_z);
         self.camangle = (self.origin - self.enemy.origin);
         self.camangle_z = (0.000 - self.camangle_z);
         self.camangle = vectoangles (self.camangle);
         self.camangle = (self.camangle - enemyang);

      }

   }

};

void () CamRevAngleLock = {

   local vector enemyang;

   if ( (self.tfstate & 32.000) ) {

      sprint (self,2.000,"Reverse Angle Lock OFF.\n");
      self.tfstate = (self.tfstate - (self.tfstate & 32.000));

   } else {

      if ( (self.tfstate & 2048.000) ) {

         sprint (self,2.000,"Vector Lock OFF.\n");
         self.tfstate = (self.tfstate - (self.tfstate & 2048.000));

      }
      if ( (self.tfstate & 32768.000) ) {

         sprint (self,2.000,"Angle Lock OFF.\n");
         self.tfstate = (self.tfstate - (self.tfstate & 32768.000));

      }
      if ( !(self.tfstate & 4096.000) ) {

         sprint (self,2.000,"Reverse Angle And Distance Lock ON.\n");
         self.tfstate = (self.tfstate | 4096.000);
         if ( self.enemy ) {

            self.camdist = vlen ((self.enemy.origin - self.origin));

         }

      } else {

         sprint (self,2.000,"Reverse Angle Lock ON.\n");

      }
      self.tfstate = (self.tfstate | 32.000);
      if ( self.enemy ) {

         enemyang = self.enemy.angles;
         enemyang_z = (0.000 - enemyang_z);
         self.camangle = (self.origin - self.enemy.origin);
         self.camangle_z = (0.000 - self.camangle_z);
         self.camangle = vectoangles (self.camangle);
         self.camangle = (self.camangle - enemyang);

      }

   }

};

void () CamProjectileLock = {

   local entity te;

   if ( (self.tfstate & 512.000) ) {

      sprint (self,2.000,"Projectile Lock OFF.\n");
      self.tfstate = (self.tfstate - (self.tfstate & 512.000));
      live_camera = 0.000;
      te = find (world,classname,"player");
      while ( ((te != world) && (live_camera == 0.000)) ) {

         if ( ((te.playerclass == 0.000) && (te.tfstate & 512.000)) ) {

            live_camera = 1.000;

         }
         te = find (te,classname,"player");

      }

   } else {

      sprint (self,2.000,"Projectile Lock ON.\n");
      self.tfstate = (self.tfstate | 512.000);
      live_camera = 1.000;

   }

};

void () CamProjectileZoom = {

   if ( (self.tfstate & 256.000) ) {

      sprint (self,2.000,"Projectile Zoom OFF.\n");
      self.tfstate = (self.tfstate - (self.tfstate & 256.000));

   } else {

      sprint (self,2.000,"Projectile Zoom ON.\n");
      self.tfstate = (self.tfstate | 256.000);

   }

};

void () CamProjectileLockOn = {

   local entity te;
   local float lockon;
   local vector enemyang;

   lockon = 0.000;
   te = find (world,classname,"player");
   while ( te ) {

      if ( ((te.playerclass == 0.000) && (te.tfstate & 512.000)) ) {

         if ( (te.enemy != world) ) {

            if ( (te.enemy == self) ) {

               lockon = 1.000;

            }

         } else {

            traceline (te.origin,self.origin,0.000,te);
            if ( (trace_ent == self) ) {

               lockon = 1.000;

            }

         }
         if ( lockon ) {

            te.tfstate = (te.tfstate - (te.tfstate & 512.000));
            sprint (te,2.000,"Projectile Locked!\n");
            te.enemy = newmis;
            newmis.enemy = te;
            if ( (te.tfstate & 256.000) ) {

               enemyang = (normalize (te.enemy.velocity) * 20.000);
               enemyang_z = (0.000 - enemyang_z);
               setorigin (te,(te.enemy.origin - enemyang));
               te.tfstate = (te.tfstate | 4096.000);
               te.camdist = 20.000;
               te.camangle = vectoangles (te.enemy.velocity);
               te.camangle_z = (0.000 - te.camangle_z);

            }

         }

      }
      te = find (te,classname,"player");

   }

};

void () CamProjectileLockOff = {

   sprint (self.enemy,2.000,"Removed Lock\n");
   self.enemy.enemy = world;

};

void () CamOffset = {

   if ( (self.view_ofs == '0.000 0.000 22.000') ) {

      self.view_ofs = '0.000 0.000 18.000';

   } else {

      if ( (self.view_ofs == '0.000 0.000 18.000') ) {

         self.view_ofs = '0.000 0.000 13.000';

      } else {

         if ( (self.view_ofs == '0.000 0.000 13.000') ) {

            self.view_ofs = '0.000 0.000 7.000';

         } else {

            if ( (self.view_ofs == '0.000 0.000 7.000') ) {

               self.view_ofs = '0.000 0.000 1.000';

            } else {

               if ( (self.view_ofs == '0.000 0.000 1.000') ) {

                  self.view_ofs = '0.000 0.000 -10.000';

               } else {

                  if ( (self.view_ofs == '0.000 0.000 -10.000') ) {

                     self.view_ofs = '0.000 0.000 -18.000';

                  } else {

                     self.view_ofs = '0.000 0.000 22.000';

                  }

               }

            }

         }

      }

   }

};

void () CamDrop = {

   local entity te;
   local entity prevte;
   local entity cam;
   local float tf;
   local string st;

   cam = spawn ();
   cam.classname = "camera";
   cam.origin = (self.origin + self.view_ofs);
   cam.angles = self.angles;
   setmodel (cam,"progs/spike.mdl");
   tf = 1.000;
   prevte = self;
   te = self.camera_list;
   while ( (te != world) ) {

      tf = (tf + 1.000);
      prevte = te;
      te = te.camera_list;

   }
   prevte.camera_list = cam;
   st = ftos (tf);
   sprint3 (self,2.000,"Camera ",st," dropped.\n");

};

void () fadetoblack = {

   local float fade;
   local string x;

   fade = 10.000;
   while ( (fade <= 250.000) ) {

      x = ftos (fade);
      stuffcmd (self,"v_cshift 0 0 0 ");
      stuffcmd (self,x);
      stuffcmd (self,";wait\n");
      fade = (fade + 10.000);

   }
   stuffcmd (self,"v_cshift 0 0 0 255\n");

};

void () fadefromblack = {

   local float fade;
   local string x;

   fade = 250.000;
   while ( (fade >= 0.000) ) {

      x = ftos (fade);
      stuffcmd (self,"v_cshift 0 0 0 ");
      stuffcmd (self,x);
      stuffcmd (self,";wait\n");
      fade = (fade - 10.000);

   }
   stuffcmd (self,"v_cshift 0 0 0 0\n");

};

void () fadetowhite = {

   local float fade;
   local string x;

   fade = 10.000;
   while ( (fade <= 250.000) ) {

      x = ftos (fade);
      stuffcmd (self,"v_cshift 255 255 255 ");
      stuffcmd (self,x);
      stuffcmd (self,";wait\n");
      fade = (fade + 10.000);

   }
   stuffcmd (self,"v_cshift 255 255 255 255\n");

};

void () fadefromwhite = {

   local float fade;
   local string x;

   fade = 250.000;
   while ( (fade >= 0.000) ) {

      x = ftos (fade);
      stuffcmd (self,"v_cshift 255 255 255 ");
      stuffcmd (self,x);
      stuffcmd (self,";wait\n");
      fade = (fade - 10.000);

   }
   stuffcmd (self,"v_cshift 0 0 0 0\n");

};
