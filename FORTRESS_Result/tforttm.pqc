
void (float tno) TeamFortress_TeamSetColor;

void (float tno, float scoretoadd) TeamFortress_TeamIncreaseScore;
float (float tno) TeamFortress_TeamGetLives;
float (float tno) TeamFortress_TeamGetMaxPlayers;
string (float tno) TeamFortress_TeamGetColorString;
float (float tno) TeamFortress_TeamGetIllegalClasses;
(null) (entity p) TeamFortress_GetSkin;
float /* Warning: Could not determine return type */ () TeamFortress_TeamPutPlayerInTeam = {

   local float i;
   local float j;
   local float lowest;
   local float likely_team;
   local string st;

   i = 1.000;
   likely_team = (random () * number_of_teams);
   likely_team = ceil (likely_team);
   if ( (likely_team == 0.000) ) {

      likely_team = number_of_teams;

   }
   lowest = 33.000;
   while ( (i < (number_of_teams + 1.000)) ) {

      j = TeamFortress_TeamGetNoPlayers (i);
      if ( (j < lowest) ) {

         if ( (TeamFortress_TeamGetMaxPlayers (i) > j) ) {

            lowest = j;
            likely_team = i;

         }

      }
      i = (i + 1.000);

   }
   return ( TeamFortress_TeamSet (likely_team) );

};
float (float tno) TeamFortress_TeamGetColor = {

   if ( (tno == 1.000) ) {

      return ( 14.000 );

   }
   if ( (tno == 2.000) ) {

      return ( 5.000 );

   }
   if ( (tno == 3.000) ) {

      return ( 13.000 );

   }
   if ( (tno == 4.000) ) {

      return ( 12.000 );

   }
   return ( 0.000 );

};

void (float tno) TeamFortress_TeamSetColor = {

   if ( (tno == 1.000) ) {

      team1col = 14.000;
      return ;

   }
   if ( (tno == 2.000) ) {

      team2col = 5.000;
      return ;

   }
   if ( (tno == 3.000) ) {

      team3col = 13.000;
      return ;

   }
   if ( (tno == 4.000) ) {

      team4col = 12.000;
      return ;

   }

};
float (float tno) TeamFortress_TeamSet = {

   local string st;
   local float tc;

   if ( (teamplay < 1.000) ) {

      sprint (self,2.000,"Teamplay is not On, so FortressTeams are inactive.\n");
      return ( 0.000 );

   }
   if ( ((tno > number_of_teams) && (number_of_teams != 0.000)) ) {

      sprint (self,2.000,"There can be only ");
      st = ftos (number_of_teams);
      sprint (self,2.000,st);
      sprint (self,2.000," teams on this map.\nTry again\n");
      return ( 0.000 );

   }
   if ( (self.team_no > 0.000) ) {

      sprint (self,2.000,"You're already in Team No ");
      st = ftos (self.team_no);
      sprint (self,2.000,st);
      sprint (self,2.000,".\n");
      return ( 0.000 );

   }
   tc = TeamFortress_TeamGetNoPlayers (tno);
   if ( (tc >= TeamFortress_TeamGetMaxPlayers (tno)) ) {

      sprint (self,2.000,"That team is full. Pick another.\n");
      return ( 0.000 );

   }
   if ( (TeamFortress_TeamGetColor (tno) == 0.000) ) {

      TeamFortress_TeamSetColor (tno);
      if ( (TeamFortress_TeamGetColor (tno) == 0.000) ) {

         sprint (self,2.000,"You can't start a new team with your color, since another ");
         sprint (self,2.000,"already using that color. Change your pants color, then try again.\n");
         return ( 0.000 );

      }
      bprint (2.000,self.netname);
      bprint (2.000," has started Team No ");
      st = ftos (tno);
      bprint (2.000,st);
      bprint (2.000,".\n");
      self.immune_to_check = (time + 10.000);
      if ( ((toggleflags & 128.000) || (toggleflags & 2048.000)) ) {

         self.frags = TeamFortress_TeamGetScore (tno);

      }
      stuffcmd (self,"color ");
      tc = (TeamFortress_TeamGetColor (tno) - 1.000);
      st = ftos (tc);
      stuffcmd (self,st);
      stuffcmd (self,"\n");
      self.team_no = tno;
      self.lives = TeamFortress_TeamGetLives (tno);
      if ( (self.playerclass == 0.000) ) {

         if ( TeamFortress_TeamIsCivilian (self.team_no) ) {

            self.impulse = 1.000;
            TeamFortress_ChangeClass ();

         }

      }
      return ( 1.000 );

   }
   bprint (2.000,self.netname);
   bprint (2.000," has joined Team No ");
   st = ftos (tno);
   bprint (2.000,st);
   bprint (2.000,".\n");
   stuffcmd (self,"color ");
   tc = (TeamFortress_TeamGetColor (tno) - 1.000);
   st = ftos (tc);
   stuffcmd (self,st);
   stuffcmd (self,"\n");
   self.team_no = tno;
   self.immune_to_check = (time + 10.000);
   self.lives = TeamFortress_TeamGetLives (tno);
   if ( ((toggleflags & 128.000) || (toggleflags & 2048.000)) ) {

      self.frags = TeamFortress_TeamGetScore (tno);

   }
   TeamFortress_TeamShowMemberClasses (self);
   if ( (self.playerclass == 0.000) ) {

      if ( TeamFortress_TeamIsCivilian (self.team_no) ) {

         self.impulse = 1.000;
         TeamFortress_ChangeClass ();

      }

   }
   return ( 1.000 );

};

void () TeamFortress_CheckTeamCheats = {

   local string st;
   local string sk;
   local float tc;

   if ( (self.immune_to_check > time) ) {

      return ;

   }
   if ( self.deadflag ) {

      return ;

   }
   if ( (coop && !deathmatch) ) {

      return ;

   }
   if ( ((self.team_no > 0.000) && (teamplay > 0.000)) ) {

      if ( ((self.playerclass == 8.000) && (self.undercover_team != 0.000)) ) {

         if ( (TeamFortress_TeamGetColor (self.undercover_team) != self.team) ) {

            stuffcmd (self,"color ");
            tc = (TeamFortress_TeamGetColor (self.undercover_team) - 1.000);
            st = ftos (tc);
            stuffcmd (self,st);
            stuffcmd (self,"\n");
            bprint2 (1.000,self.netname," has been kicked for changing color.\n");
            sprint (self,2.000,"You have been kicked for changing your pants color. Don't do it.\n");
            KickCheater (self);
            return ;

         }

      } else {

         if ( (TeamFortress_TeamGetColor (self.team_no) != self.team) ) {

            stuffcmd (self,"color ");
            tc = (TeamFortress_TeamGetColor (self.team_no) - 1.000);
            st = ftos (tc);
            stuffcmd (self,st);
            stuffcmd (self,"\n");
            bprint2 (1.000,self.netname," has been kicked for changing color.\n");
            sprint (self,2.000,"You have been kicked for changing your pants color. Don't do it.\n");
            KickCheater (self);
            return ;

         }

      }

   }

};

void (float tno, float scoretoadd) TeamFortress_TeamIncreaseScore = {

   local entity e;

   if ( ((tno == 0.000) || (scoretoadd == 0.000)) ) {

      return ;

   }
   if ( (tno == 1.000) ) {

      team1score = (team1score + scoretoadd);

   }
   if ( (tno == 2.000) ) {

      team2score = (team2score + scoretoadd);

   }
   if ( (tno == 3.000) ) {

      team3score = (team3score + scoretoadd);

   }
   if ( (tno == 4.000) ) {

      team4score = (team4score + scoretoadd);

   }
   if ( ((toggleflags & 128.000) || (toggleflags & 2048.000)) ) {

      e = find (world,classname,"player");
      while ( e ) {

         if ( (e.team_no == tno) ) {

            e.frags = TeamFortress_TeamGetScore (tno);

         }
         e = find (e,classname,"player");

      }

   }

};
float (float tno) TeamFortress_TeamGetScore = {

   if ( (tno == 1.000) ) {

      return ( team1score );

   }
   if ( (tno == 2.000) ) {

      return ( team2score );

   }
   if ( (tno == 3.000) ) {

      return ( team3score );

   }
   if ( (tno == 4.000) ) {

      return ( team4score );

   }
   return ( 0.000 );

};
float (float tno) TeamFortress_TeamGetScoreFrags = {

   if ( ((toggleflags & 128.000) || (toggleflags & 2048.000)) ) {

      if ( (tno == 1.000) ) {

         return ( team1score );

      }
      if ( (tno == 2.000) ) {

         return ( team2score );

      }
      if ( (tno == 3.000) ) {

         return ( team3score );

      }
      if ( (tno == 4.000) ) {

         return ( team4score );

      }

   } else {

      if ( (tno == 1.000) ) {

         return ( team1frags );

      }
      if ( (tno == 2.000) ) {

         return ( team2frags );

      }
      if ( (tno == 3.000) ) {

         return ( team3frags );

      }
      if ( (tno == 4.000) ) {

         return ( team4frags );

      }

   }
   return ( 0.000 );

};
float (float tno) TeamFortress_TeamGetLives = {

   if ( (tno == 1.000) ) {

      return ( team1lives );

   }
   if ( (tno == 2.000) ) {

      return ( team2lives );

   }
   if ( (tno == 3.000) ) {

      return ( team3lives );

   }
   if ( (tno == 4.000) ) {

      return ( team4lives );

   }
   return ( 0.000 );

};
float (float tno) TeamFortress_TeamGetNoPlayers = {

   local float size_team;
   local entity search;

   search = find (world,classname,"player");
   while ( (search != world) ) {

      if ( (search.team_no == tno) ) {

         size_team = (size_team + 1.000);

      }
      search = find (search,classname,"player");

   }
   return ( size_team );

};
float () TeamFortress_GetNoPlayers = {

   local float nump;
   local entity search;

   search = find (world,classname,"player");
   while ( (search != world) ) {

      if ( (search.netname != string_null) ) {

         nump = (nump + 1.000);

      }
      search = find (search,classname,"player");

   }
   return ( nump );

};
float (float tno) TeamFortress_TeamGetMaxPlayers = {

   if ( (tno == 1.000) ) {

      return ( team1maxplayers );

   }
   if ( (tno == 2.000) ) {

      return ( team2maxplayers );

   }
   if ( (tno == 3.000) ) {

      return ( team3maxplayers );

   }
   if ( (tno == 4.000) ) {

      return ( team4maxplayers );

   }
   return ( 0.000 );

};
float () TeamFortress_TeamGetWinner = {

   local float i;
   local float j;
   local float highest;
   local float highestteam;

   i = 1.000;
   highest = 0.000;
   highestteam = 0.000;
   while ( (i < (number_of_teams + 1.000)) ) {

      j = TeamFortress_TeamGetScoreFrags (i);
      if ( (j > highest) ) {

         highest = j;
         highestteam = i;

      }
      i = (i + 1.000);

   }
   return ( highestteam );

};
float () TeamFortress_TeamGetSecond = {

   local float i;
   local float j;
   local float highest;
   local float highestteam;
   local float secondteam;
   local float second;

   i = 1.000;
   highestteam = TeamFortress_TeamGetWinner ();
   highest = TeamFortress_TeamGetScoreFrags (highestteam);
   secondteam = 0.000;
   second = 0.000;
   while ( (i < (number_of_teams + 1.000)) ) {

      j = TeamFortress_TeamGetScoreFrags (i);
      if ( ((j < highest) && (j > second)) ) {

         second = j;
         secondteam = i;

      }
      i = (i + 1.000);

   }
   return ( secondteam );

};

void (float all) TeamFortress_TeamShowScores = {

   local string st;
   local float i;
   local float j;

   i = 1.000;
   if ( (all == 2.000) ) {

      while ( (i <= number_of_teams) ) {

         if ( (TeamFortress_TeamGetColor (i) > 0.000) ) {

            j = TeamFortress_TeamGetScore (i);
            st = TeamFortress_TeamGetColorString (i);
            bprint (2.000,st);
            bprint (2.000,": ");
            st = ftos (j);
            bprint (2.000,st);
            bprint (2.000," ");

         }
         i = (i + 1.000);

      }
      bprint (2.000,"\n");
      return ;

   }
   while ( (i <= number_of_teams) ) {

      if ( (TeamFortress_TeamGetColor (i) > 0.000) ) {

         if ( all ) {

            bprint (2.000,"Team ");

         } else {

            sprint (self,2.000,"Team ");

         }
         st = ftos (i);
         if ( all ) {

            bprint (2.000,st);

         } else {

            sprint (self,2.000,st);

         }
         if ( all ) {

            bprint (2.000," (");

         } else {

            sprint (self,2.000," (");

         }
         st = TeamFortress_TeamGetColorString (i);
         if ( all ) {

            bprint (2.000,st);

         } else {

            sprint (self,2.000,st);

         }
         if ( all ) {

            bprint (2.000,") : ");

         } else {

            sprint (self,2.000,") : ");

         }
         j = TeamFortress_TeamGetScore (i);
         st = ftos (j);
         if ( all ) {

            bprint (2.000,st);

         } else {

            sprint (self,2.000,st);

         }
         if ( all ) {

            bprint (2.000,"\n");

         } else {

            sprint (self,2.000,"\n");

         }

      }
      i = (i + 1.000);

   }

};
string (float tno) TeamFortress_TeamGetColorString = {

   local float col;

   col = TeamFortress_TeamGetColor (tno);
   if ( (col == 1.000) ) {

      return ( "White" );

   }
   if ( (col == 2.000) ) {

      return ( "Brown" );

   }
   if ( (col == 3.000) ) {

      return ( "Blue" );

   }
   if ( (col == 4.000) ) {

      return ( "Green" );

   }
   if ( (col == 5.000) ) {

      return ( "Red" );

   }
   if ( (col == 6.000) ) {

      return ( "Tan" );

   }
   if ( (col == 7.000) ) {

      return ( "Pink" );

   }
   if ( (col == 8.000) ) {

      return ( "Orange" );

   }
   if ( (col == 9.000) ) {

      return ( "Purple" );

   }
   if ( (col == 10.000) ) {

      return ( "DarkPurple" );

   }
   if ( (col == 11.000) ) {

      return ( "Grey" );

   }
   if ( (col == 12.000) ) {

      return ( "DarkGreen" );

   }
   if ( (col == 13.000) ) {

      return ( "Yellow" );

   }
   return ( "DarkBlue" );

};

void (entity Player) TeamFortress_TeamShowMemberClasses = {

   local entity e;
   local float found;

   found = 0.000;
   e = find (world,classname,"player");
   while ( e ) {

      if ( (((e.team_no == Player.team_no) || (e.team_no == 0.000)) && (e != Player)) ) {

         if ( (e.model != string_null) ) {

            if ( !found ) {

               found = 1.000;
               sprint (self,2.000,"The other members of your team are:\n");

            }
            sprint (Player,2.000,e.netname);
            sprint (Player,2.000," : ");
            TeamFortress_PrintClassName (Player,e.playerclass,(e.tfstate & 8.000));

         }

      }
      e = find (e,classname,"player");

   }
   if ( !found ) {

      sprint (Player,2.000,"There are no other players on your team.\n");

   }

};

void () CalculateTeamEqualiser = {

   local float t1;
   local float t2;
   local float t3;
   local float t4;
   local float t_ave;
   local float calc;

   team1advantage = 1.000;
   team2advantage = 1.000;
   team3advantage = 1.000;
   team4advantage = 1.000;
   if ( (number_of_teams < 2.000) ) {

      self.nextthink = (time + 60.000);
      return ;

   }
   if ( (teamplay & 32.000) ) {

      t1 = TeamFortress_TeamGetNoPlayers (1.000);
      t2 = TeamFortress_TeamGetNoPlayers (2.000);
      t3 = TeamFortress_TeamGetNoPlayers (3.000);
      t4 = TeamFortress_TeamGetNoPlayers (4.000);
      if ( ((((t1 + t2) + t3) + t4) < 1.000) ) {

         self.nextthink = (time + 30.000);
         return ;

      }
      t_ave = ((((t1 + t2) + t3) + t4) / number_of_teams);
      if ( (t1 > 0.000) ) {

         calc = ((t_ave / t1) - 1.000);
         if ( (calc != 0.000) ) {

            calc = ((calc / 3.000) + 1.000);

         } else {

            calc = (calc + 1.000);

         }
         team1advantage = calc;

      }
      if ( ((t2 > 0.000) && (number_of_teams >= 2.000)) ) {

         calc = ((t_ave / t2) - 1.000);
         if ( (calc != 0.000) ) {

            calc = ((calc / 3.000) + 1.000);

         } else {

            calc = (calc + 1.000);

         }
         team2advantage = calc;

      }
      if ( ((t3 > 0.000) && (number_of_teams >= 3.000)) ) {

         calc = ((t_ave / t3) - 1.000);
         if ( (calc != 0.000) ) {

            calc = ((calc / 3.000) + 1.000);

         } else {

            calc = (calc + 1.000);

         }
         team3advantage = calc;

      }
      if ( ((t4 > 0.000) && (number_of_teams >= 4.000)) ) {

         calc = ((t_ave / t4) - 1.000);
         if ( (calc != 0.000) ) {

            calc = ((calc / 3.000) + 1.000);

         } else {

            calc = (calc + 1.000);

         }
         team4advantage = calc;

      }

   }
   if ( (teamplay & 64.000) ) {

      t1 = (team1score + 60.000);
      if ( (number_of_teams >= 2.000) ) {

         t2 = (team2score + 60.000);

      } else {

         t2 = 0.000;

      }
      if ( (number_of_teams >= 3.000) ) {

         t3 = (team3score + 60.000);

      } else {

         t3 = 0.000;

      }
      if ( (number_of_teams >= 4.000) ) {

         t4 = (team4score + 60.000);

      } else {

         t4 = 0.000;

      }
      t_ave = (((t2 + t3) + t4) / (number_of_teams - 1.000));
      calc = ((t_ave / t1) - 1.000);
      if ( (calc != 0.000) ) {

         calc = ((calc / 3.000) + 1.000);

      } else {

         calc = (calc + 1.000);

      }
      team1advantage = (calc * team1advantage);
      if ( (number_of_teams >= 2.000) ) {

         t_ave = (((t1 + t3) + t4) / (number_of_teams - 1.000));
         calc = ((t_ave / t2) - 1.000);
         if ( (calc != 0.000) ) {

            calc = ((calc / 3.000) + 1.000);

         } else {

            calc = (calc + 1.000);

         }
         team2advantage = (calc * team2advantage);

      }
      if ( (number_of_teams >= 3.000) ) {

         t_ave = (((t2 + t1) + t4) / (number_of_teams - 1.000));
         calc = ((t_ave / t3) - 1.000);
         if ( (calc != 0.000) ) {

            calc = ((calc / 3.000) + 1.000);

         } else {

            calc = (calc + 1.000);

         }
         team3advantage = (calc * team3advantage);

      }
      if ( (number_of_teams >= 4.000) ) {

         t_ave = (((t2 + t3) + t1) / (number_of_teams - 1.000));
         calc = ((t_ave / t4) - 1.000);
         if ( (calc != 0.000) ) {

            calc = ((calc / 3.000) + 1.000);

         } else {

            calc = (calc + 1.000);

         }
         team4advantage = (calc * team4advantage);

      }

   }
   self.nextthink = (time + 10.000);

};

void () SetupTeamEqualiser = {

   /* Warning: No local name with offset 14817 */
   /* Warning: No local name with offset 14818 */
   /* Warning: No local name with offset 14819 */
   local entity TE;

   team1advantage = 1.000;
   team2advantage = 1.000;
   team3advantage = 1.000;
   team4advantage = 1.000;
   if ( !(teamplay & (32.000 | 64.000)) ) {

      return ;

   }
   TE = spawn ();
   TE.classname = "Team Equaliser";
   TE.think = CalculateTeamEqualiser;
   TE.nextthink = (time + 30.000);

};
float (entity targ, entity attacker, float damage) TeamEqualiseDamage = {

   /* Warning: No local name with offset 14829 */
   /* Warning: No local name with offset 14830 */
   /* Warning: No local name with offset 14831 */
   /* Warning: No local name with offset 14832 */
   /* Warning: No local name with offset 14833 */
   /* Warning: No local name with offset 14834 */
   /* Warning: No local name with offset 14835 */
   /* Warning: No local name with offset 14836 */
   /* Warning: No local name with offset 14837 */
   /* Warning: No local name with offset 14838 */
   /* Warning: No local name with offset 14839 */
   /* Warning: No local name with offset 14840 */
   /* Warning: No local name with offset 14841 */
   /* Warning: No local name with offset 14842 */
   local float adv;
   local float newdam;

   if ( ((targ.classname != "player") || (attacker.classname != "player")) ) {

      return ( damage );

   }
   if ( (((targ.team_no == 0.000) || (attacker.team_no == 0.000)) || (attacker.team_no == targ.team_no)) ) {

      return ( damage );

   }
   if ( (attacker.team_no == 1.000) ) {

      adv = team1advantage;

   } else {

      if ( (attacker.team_no == 2.000) ) {

         adv = team2advantage;

      } else {

         if ( (attacker.team_no == 3.000) ) {

            adv = team3advantage;

         } else {

            if ( (attacker.team_no == 4.000) ) {

               adv = team4advantage;

            }

         }

      }

   }
   if ( (adv == 0.000) ) {

      dprint ("There is a team with an advantage of 0\n");
      adv = 0.100;

   }
   newdam = (damage * adv);
   if ( (targ.team_no == 1.000) ) {

      adv = team1advantage;

   } else {

      if ( (targ.team_no == 2.000) ) {

         adv = team2advantage;

      } else {

         if ( (targ.team_no == 3.000) ) {

            adv = team3advantage;

         } else {

            if ( (targ.team_no == 4.000) ) {

               adv = team4advantage;

            }

         }

      }

   }
   if ( (adv == 0.000) ) {

      dprint ("There is a team with an advantage of 0\n");
      adv = 0.100;

   }
   newdam = (newdam * (1.000 / adv));
   return ( newdam );

};

void () TeamFortress_StatusQuery = {

   local float ft;
   local string st;

   sprint (self,2.000,"players per team: ");
   ft = TeamFortress_TeamGetNoPlayers (1.000);
   st = ftos (ft);
   sprint (self,2.000,st);
   sprint (self,2.000,"  ");
   ft = TeamFortress_TeamGetNoPlayers (2.000);
   st = ftos (ft);
   sprint (self,2.000,st);
   sprint (self,2.000,"  ");
   ft = TeamFortress_TeamGetNoPlayers (3.000);
   st = ftos (ft);
   sprint (self,2.000,st);
   sprint (self,2.000,"  ");
   ft = TeamFortress_TeamGetNoPlayers (4.000);
   st = ftos (ft);
   sprint (self,2.000,st);
   sprint (self,2.000,"\n");
   sprint (self,2.000,"    equalisation: ");
   st = ftos (team1advantage);
   sprint (self,2.000,st);
   sprint (self,2.000,"  ");
   st = ftos (team2advantage);
   sprint (self,2.000,st);
   sprint (self,2.000,"  ");
   st = ftos (team3advantage);
   sprint (self,2.000,st);
   sprint (self,2.000,"  ");
   st = ftos (team4advantage);
   sprint (self,2.000,st);
   sprint (self,2.000,"\n");
   st = ftos (teamplay);
   sprint (self,2.000,"Teamplay is ");
   sprint (self,2.000,st);
   sprint (self,2.000,"\n");

};
float (float tno) TeamFortress_TeamGetIllegalClasses = {

   if ( (tno == 1.000) ) {

      return ( illegalclasses1 );

   }
   if ( (tno == 2.000) ) {

      return ( illegalclasses2 );

   }
   if ( (tno == 3.000) ) {

      return ( illegalclasses3 );

   }
   if ( (tno == 4.000) ) {

      return ( illegalclasses4 );

   }
   return ( 0.000 );

};
float (float tno) TeamFortress_TeamIsCivilian = {

   local entity te;

   if ( (tno == 1.000) ) {

      if ( (civilianteams & 1.000) ) {

         return ( 1.000 );

      }

   } else {

      if ( (tno == 2.000) ) {

         if ( (civilianteams & 2.000) ) {

            return ( 1.000 );

         }

      } else {

         if ( (tno == 3.000) ) {

            if ( (civilianteams & 4.000) ) {

               return ( 1.000 );

            }

         } else {

            if ( (civilianteams & 8.000) ) {

               return ( 1.000 );

            }

         }

      }

   }
   return ( 0.000 );

};

void (float tno, entity ignore, string st) teamsprint = {

   local entity te;

   if ( (tno == 0.000) ) {

      return ;

   }
   te = find (world,classname,"player");
   while ( te ) {

      if ( ((te.team_no == tno) && (te != ignore)) ) {

         sprint (te,2.000,st);

      }
      te = find (te,classname,"player");

   }

};
